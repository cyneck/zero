<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!--导入属性配置,也可不引入，则下面数据库连接的信息要直接写出 -->
    <properties resource="db.properties"></properties>

    <!-- 生成简单版的CRUD：MyBatis3Simple；豪华版：MyBatis3。-->
    <context id="MyBatisGenerator"  targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--配置是否使用通用 Mapper 自带的注释扩展，默认 true-->
        <!--<property name="useMapperCommentGenerator" value="false"/>-->

        <!-- 生成的实体Bean,将实现Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>

        <!-- 配置生成pojo的toString()方法的插件，mybatis支持很多插件，这些插件都在 org.mybatis.generator.plugins包下 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- 自定义物理分页  可生成支持Mysql数据的limit  不支持Oracle -->
        <!--<plugin type="org.mybatis.generator.plugins.page.PaginationPlugin" />-->

        <!-- 开启支持内存分页   可生成 支持内存分布的方法及参数 -->
        <!--<plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" />-->

        <!-- generate entity时，生成hashcode和equals方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />-->

        <!-- 此处是将Example改名为Criteria 当然 想改成什么都行~    -->
        <!--<plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">-->
        <!--<property name="searchString" value="Example$" />-->
        <!--<!– 替换后  -->
        <!--<property name="replaceString" value="Criteria" />    -->
        <!--–>-->
        <!--<property name="replaceString" value="Query" />-->
        <!--</plugin>-->
        <!-- 此处是将UserMapper.xml改名为UserDao.xml 当然 想改成什么都行~ -->
        <!--<plugin type="org.mybatis.generator.plugins.rename.RenameSqlMapperPlugin">-->
        <!--<property name="searchString" value="Mapper" />-->
        <!--<property name="replaceString" value="Dao" />-->
        <!--</plugin>-->

        <!--<!– 此处是将UserMapper改名为UserDao 接口 当然 想改成什么都行~  –>-->
        <!--<plugin type="org.mybatis.generator.plugins.rename.RenameJavaMapperPlugin">-->
        <!--<property name="searchString" value="Mapper$" />-->
        <!--<property name="replaceString" value="Dao" />-->
        <!--</plugin>-->

        <!-- 注释生成-->
        <commentGenerator type="org.mybatis.generator.internal.DefaultCommentGenerator">
            <!-- 是否去除自动生成的注释 true：是; false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!--生成的注释包含时间戳-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>


        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
            NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- targetProject:生成PO类的位置 -->
        <javaModelGenerator targetPackage="com.cyneck.zero.entry.model.pojo"
                            targetProject="src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 给Model添加一个父类 -->
            <property name="rootClass" value="com.cyneck.zero.common.model.BaseEntity"/>
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="true"/>
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- targetProject:mapper.xml映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="generateMapper"
                         targetProject="src/main/resources">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
            <property name="javaFileEncoding" value="UTF-8"/>
        </sqlMapGenerator>

        <!-- targetPackage：dao层接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.cyneck.zero.entry.mapper"
                             targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
            <property name="javaFileEncoding" value="UTF-8"/>
        </javaClientGenerator>


        <!-- 指定数据库表 -->
        <!--生成对应表及类名-->
        <!-- tableName:表名;domainObjectName:实体类名(在property总设置name="useActualColumnNames" value="true"，可以自动实现下划线驼峰命名)-->
        <table tableName="tenant"
               enableCountByExample="false" enableUpdateByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
            <!-- <generatedKey column="ID" sqlStatement="oracle" identity="true" /> -->
        </table>
        <table tableName="tenant_config"
               enableCountByExample="false" enableUpdateByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
        </table>
        <table tableName="tenant_parameter"
               enableCountByExample="false" enableUpdateByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
        </table>

    </context>
</generatorConfiguration>
